package edu.haui.bvdong.quizapp.utils.createPDF;

import com.itextpdf.text.*;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.pdf.PdfWriter;

import edu.haui.bvdong.quizapp.common.FontStyleCustom;
import edu.haui.bvdong.quizapp.common.LoggerSpringBoot;
import edu.haui.bvdong.quizapp.common.Note;
import edu.haui.bvdong.quizapp.common.PageTitleConstrants;
import edu.haui.bvdong.quizapp.model.Answer;
import edu.haui.bvdong.quizapp.model.Question;
import edu.haui.bvdong.quizapp.model.Test;

public class ConvertWebPageToPdf {
    /**
     *
     * @param test
     *
     */
    public static void createPDF(Test test,String pathSaveFile) {
        try {
            LoggerSpringBoot.getLoggerSpringBoot().info("START CREATE PDF");
            Document document = new Document(); // create a object is document

            PdfWriter.getInstance(document, new FileOutputStream( pathSaveFile));//create a file PDF use PdfWriter of IText
            document.open();// open document for write text to it
            addMetaData(document, test); //add meta data for it.Metadata used to description information
            addTitlePage(document, test); //add title data for it
            addContent(document, test.getQuestions()); //add content data for it
            document.close();
            LoggerSpringBoot.getLoggerSpringBoot().info("FINISH CREATE PDF");
        } catch (Exception e) {
            LoggerSpringBoot.getLoggerSpringBoot().error("CAN'T CREATE PDF"+e);
            e.printStackTrace();
        }
    }

    /**
     * metadata used to description information
     * @param document
     * @param test
     */
    private static void addMetaData(Document document, Test test) {
        document.addTitle(PageTitleConstrants.QUIZ_PRINT);
        document.addAuthor(System.getProperty("user.name"));
        document.addCreator(System.getProperty("user.name"));
    }
    private static void addTitlePage(Document document, Test test)
            throws DocumentException {
        Paragraph pre = new Paragraph();
        // Will create: Report generated by: _name, _date
        pre.add(new Paragraph(
                "Created by: " + System.getProperty("user.name") + ", " + new Date(),
                FontStyleCustom.SIZE_12));
        document.add(pre);
        // Lets write a header here
        Paragraph paragTitle = new Paragraph(test.getTestText(), FontStyleCustom.SIZE_28_BOLD);
        paragTitle.setAlignment(Element.ALIGN_CENTER);
        addEmptyLine(paragTitle, 1);
        document.add(paragTitle);
        Paragraph preface = new Paragraph();
        Paragraph paraSubInfor=new Paragraph("Course: " + test.getCourse().getCourseName() + " | " + "Level: " + test.getLevel().getLevelName()
                + " | " + " Time: " + test.getDuration() +" .minutes"+ " | " + "Total Mark: " + test.getTotalMark()+" .points", FontStyleCustom.SIZE_14_BOLD);
        paraSubInfor.setAlignment(Element.ALIGN_CENTER);
        preface.add(paraSubInfor);
        addEmptyLine(preface, 1);
        preface.add(new Paragraph(Note.NOTE_EXAM_PDF_02,FontStyleCustom.SIZE_12_BOLD));
        addEmptyLine(preface, 1);

        document.add(preface);
    }

    /**
     *
     * @param document
     * @param questionList
     * @do {
     *     add content to document use Document & Paragraph
     * }
     * @throws DocumentException
     */
    private static void addContent(Document document, java.util.List<Question> questionList) throws DocumentException {
        int i = 0;
        for (Question question : questionList
        ) {
            i = i + 1;
            // Second parameter is the number of the chapter
            Paragraph paragraph = new Paragraph(i+". "+question.getQuestionText(), FontStyleCustom.SIZE_18_BOLD);
            for (Answer answer : question.getAnswers()) {
                paragraph.add(new Paragraph("      " + answer.getSequence() + ". " + answer.getAnswerText(), FontStyleCustom.SIZE_16));
            }
            // now add all this to the document
            document.add(paragraph);
        }

    }

    /**
     *
     * @param paragraph
     * @Do {
     *     create a row empty the same <br>
     * }
     * @param number
     */
    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}